/*
The SMS Works API

The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

API version: 1.9.0
Contact: support@thesmsworks.co.uk
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MessageMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageMetadata{}

// MessageMetadata struct for MessageMetadata
type MessageMetadata struct {
	Schema *MetaData `json:"schema,omitempty"`
}

// NewMessageMetadata instantiates a new MessageMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageMetadata() *MessageMetadata {
	this := MessageMetadata{}
	return &this
}

// NewMessageMetadataWithDefaults instantiates a new MessageMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageMetadataWithDefaults() *MessageMetadata {
	this := MessageMetadata{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *MessageMetadata) GetSchema() MetaData {
	if o == nil || IsNil(o.Schema) {
		var ret MetaData
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageMetadata) GetSchemaOk() (*MetaData, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *MessageMetadata) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given MetaData and assigns it to the Schema field.
func (o *MessageMetadata) SetSchema(v MetaData) {
	o.Schema = &v
}

func (o MessageMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	return toSerialize, nil
}

type NullableMessageMetadata struct {
	value *MessageMetadata
	isSet bool
}

func (v NullableMessageMetadata) Get() *MessageMetadata {
	return v.value
}

func (v *NullableMessageMetadata) Set(val *MessageMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageMetadata(val *MessageMetadata) *NullableMessageMetadata {
	return &NullableMessageMetadata{value: val, isSet: true}
}

func (v NullableMessageMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


