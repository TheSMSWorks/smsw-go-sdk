/*
The SMS Works API

The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

API version: 1.9.0
Contact: support@thesmsworks.co.uk
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the BatchMessageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchMessageResponse{}

// BatchMessageResponse struct for BatchMessageResponse
type BatchMessageResponse struct {
	Batchid string `json:"batchid"`
	Status string `json:"status"`
}

type _BatchMessageResponse BatchMessageResponse

// NewBatchMessageResponse instantiates a new BatchMessageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchMessageResponse(batchid string, status string) *BatchMessageResponse {
	this := BatchMessageResponse{}
	this.Batchid = batchid
	this.Status = status
	return &this
}

// NewBatchMessageResponseWithDefaults instantiates a new BatchMessageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchMessageResponseWithDefaults() *BatchMessageResponse {
	this := BatchMessageResponse{}
	return &this
}

// GetBatchid returns the Batchid field value
func (o *BatchMessageResponse) GetBatchid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Batchid
}

// GetBatchidOk returns a tuple with the Batchid field value
// and a boolean to check if the value has been set.
func (o *BatchMessageResponse) GetBatchidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Batchid, true
}

// SetBatchid sets field value
func (o *BatchMessageResponse) SetBatchid(v string) {
	o.Batchid = v
}

// GetStatus returns the Status field value
func (o *BatchMessageResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BatchMessageResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BatchMessageResponse) SetStatus(v string) {
	o.Status = v
}

func (o BatchMessageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchMessageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["batchid"] = o.Batchid
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *BatchMessageResponse) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"batchid",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchMessageResponse := _BatchMessageResponse{}

	err = json.Unmarshal(bytes, &varBatchMessageResponse)

	if err != nil {
		return err
	}

	*o = BatchMessageResponse(varBatchMessageResponse)

	return err
}

type NullableBatchMessageResponse struct {
	value *BatchMessageResponse
	isSet bool
}

func (v NullableBatchMessageResponse) Get() *BatchMessageResponse {
	return v.value
}

func (v *NullableBatchMessageResponse) Set(val *BatchMessageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchMessageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchMessageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchMessageResponse(val *BatchMessageResponse) *NullableBatchMessageResponse {
	return &NullableBatchMessageResponse{value: val, isSet: true}
}

func (v NullableBatchMessageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchMessageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


