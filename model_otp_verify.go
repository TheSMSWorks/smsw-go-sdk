/*
The SMS Works API

The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

API version: 1.9.0
Contact: support@thesmsworks.co.uk
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OTPVerify type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OTPVerify{}

// OTPVerify Schema for the /oyp/verify method
type OTPVerify struct {
	// One-Time Passcode submitted to your application
	Passcode *string `json:"passcode,omitempty"`
}

// NewOTPVerify instantiates a new OTPVerify object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOTPVerify() *OTPVerify {
	this := OTPVerify{}
	return &this
}

// NewOTPVerifyWithDefaults instantiates a new OTPVerify object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOTPVerifyWithDefaults() *OTPVerify {
	this := OTPVerify{}
	return &this
}

// GetPasscode returns the Passcode field value if set, zero value otherwise.
func (o *OTPVerify) GetPasscode() string {
	if o == nil || IsNil(o.Passcode) {
		var ret string
		return ret
	}
	return *o.Passcode
}

// GetPasscodeOk returns a tuple with the Passcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTPVerify) GetPasscodeOk() (*string, bool) {
	if o == nil || IsNil(o.Passcode) {
		return nil, false
	}
	return o.Passcode, true
}

// HasPasscode returns a boolean if a field has been set.
func (o *OTPVerify) HasPasscode() bool {
	if o != nil && !IsNil(o.Passcode) {
		return true
	}

	return false
}

// SetPasscode gets a reference to the given string and assigns it to the Passcode field.
func (o *OTPVerify) SetPasscode(v string) {
	o.Passcode = &v
}

func (o OTPVerify) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OTPVerify) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Passcode) {
		toSerialize["passcode"] = o.Passcode
	}
	return toSerialize, nil
}

type NullableOTPVerify struct {
	value *OTPVerify
	isSet bool
}

func (v NullableOTPVerify) Get() *OTPVerify {
	return v.value
}

func (v *NullableOTPVerify) Set(val *OTPVerify) {
	v.value = val
	v.isSet = true
}

func (v NullableOTPVerify) IsSet() bool {
	return v.isSet
}

func (v *NullableOTPVerify) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOTPVerify(val *OTPVerify) *NullableOTPVerify {
	return &NullableOTPVerify{value: val, isSet: true}
}

func (v NullableOTPVerify) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOTPVerify) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


