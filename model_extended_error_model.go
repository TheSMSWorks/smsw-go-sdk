/*
The SMS Works API

The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

API version: 1.9.0
Contact: support@thesmsworks.co.uk
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ExtendedErrorModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtendedErrorModel{}

// ExtendedErrorModel struct for ExtendedErrorModel
type ExtendedErrorModel struct {
	Message string `json:"message"`
	// Numeric code used to identify the error. Integer.
	ErrorCode float32 `json:"errorCode"`
	Status string `json:"status"`
	Permanent *bool `json:"permanent,omitempty"`
}

type _ExtendedErrorModel ExtendedErrorModel

// NewExtendedErrorModel instantiates a new ExtendedErrorModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendedErrorModel(message string, errorCode float32, status string) *ExtendedErrorModel {
	this := ExtendedErrorModel{}
	this.Message = message
	this.ErrorCode = errorCode
	this.Status = status
	return &this
}

// NewExtendedErrorModelWithDefaults instantiates a new ExtendedErrorModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendedErrorModelWithDefaults() *ExtendedErrorModel {
	this := ExtendedErrorModel{}
	return &this
}

// GetMessage returns the Message field value
func (o *ExtendedErrorModel) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ExtendedErrorModel) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ExtendedErrorModel) SetMessage(v string) {
	o.Message = v
}

// GetErrorCode returns the ErrorCode field value
func (o *ExtendedErrorModel) GetErrorCode() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *ExtendedErrorModel) GetErrorCodeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *ExtendedErrorModel) SetErrorCode(v float32) {
	o.ErrorCode = v
}

// GetStatus returns the Status field value
func (o *ExtendedErrorModel) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ExtendedErrorModel) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ExtendedErrorModel) SetStatus(v string) {
	o.Status = v
}

// GetPermanent returns the Permanent field value if set, zero value otherwise.
func (o *ExtendedErrorModel) GetPermanent() bool {
	if o == nil || IsNil(o.Permanent) {
		var ret bool
		return ret
	}
	return *o.Permanent
}

// GetPermanentOk returns a tuple with the Permanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedErrorModel) GetPermanentOk() (*bool, bool) {
	if o == nil || IsNil(o.Permanent) {
		return nil, false
	}
	return o.Permanent, true
}

// HasPermanent returns a boolean if a field has been set.
func (o *ExtendedErrorModel) HasPermanent() bool {
	if o != nil && !IsNil(o.Permanent) {
		return true
	}

	return false
}

// SetPermanent gets a reference to the given bool and assigns it to the Permanent field.
func (o *ExtendedErrorModel) SetPermanent(v bool) {
	o.Permanent = &v
}

func (o ExtendedErrorModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtendedErrorModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["errorCode"] = o.ErrorCode
	toSerialize["status"] = o.Status
	if !IsNil(o.Permanent) {
		toSerialize["permanent"] = o.Permanent
	}
	return toSerialize, nil
}

func (o *ExtendedErrorModel) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"errorCode",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtendedErrorModel := _ExtendedErrorModel{}

	err = json.Unmarshal(bytes, &varExtendedErrorModel)

	if err != nil {
		return err
	}

	*o = ExtendedErrorModel(varExtendedErrorModel)

	return err
}

type NullableExtendedErrorModel struct {
	value *ExtendedErrorModel
	isSet bool
}

func (v NullableExtendedErrorModel) Get() *ExtendedErrorModel {
	return v.value
}

func (v *NullableExtendedErrorModel) Set(val *ExtendedErrorModel) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendedErrorModel) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendedErrorModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendedErrorModel(val *ExtendedErrorModel) *NullableExtendedErrorModel {
	return &NullableExtendedErrorModel{value: val, isSet: true}
}

func (v NullableExtendedErrorModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendedErrorModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


