/*
The SMS Works API

The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

API version: 1.9.0
Contact: support@thesmsworks.co.uk
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OTP type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OTP{}

// OTP Parameters for the generation and sending of One-Time Passwords
type OTP struct {
	// The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.
	Sender *string `json:"sender,omitempty"`
	// The phone number of the recipient.
	Destination *string `json:"destination,omitempty"`
	// The length of the generated passcode. The default length is 6 characters, which will apply if this parameter is omitted. All generated passcodes are numeric. Optional.
	Length map[string]interface{} `json:"length,omitempty"`
	// A template to use as the content for the message. You must include the '{{passcode}}' placeholder, which will be replaced by the generated passcode when the message is sent. Optional.
	Template *string `json:"template,omitempty"`
	// The length of time in seconds for which the generated passcode should be valid. Optional.
	Validity *float32 `json:"validity,omitempty"`
	// A passcode you supply for use in the message template. This will be stored on the OTP record in our system for later verification. Optional.
	Passcode *string `json:"passcode,omitempty"`
	// A JSON object of no longer than 1024 bytes, containing as many parameters as you wish, to store data for use in your application. This will be returned when you verify the passcode.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// NewOTP instantiates a new OTP object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOTP() *OTP {
	this := OTP{}
	return &this
}

// NewOTPWithDefaults instantiates a new OTP object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOTPWithDefaults() *OTP {
	this := OTP{}
	return &this
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *OTP) GetSender() string {
	if o == nil || IsNil(o.Sender) {
		var ret string
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTP) GetSenderOk() (*string, bool) {
	if o == nil || IsNil(o.Sender) {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *OTP) HasSender() bool {
	if o != nil && !IsNil(o.Sender) {
		return true
	}

	return false
}

// SetSender gets a reference to the given string and assigns it to the Sender field.
func (o *OTP) SetSender(v string) {
	o.Sender = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *OTP) GetDestination() string {
	if o == nil || IsNil(o.Destination) {
		var ret string
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTP) GetDestinationOk() (*string, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *OTP) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given string and assigns it to the Destination field.
func (o *OTP) SetDestination(v string) {
	o.Destination = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *OTP) GetLength() map[string]interface{} {
	if o == nil || IsNil(o.Length) {
		var ret map[string]interface{}
		return ret
	}
	return o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTP) GetLengthOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Length) {
		return map[string]interface{}{}, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *OTP) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given map[string]interface{} and assigns it to the Length field.
func (o *OTP) SetLength(v map[string]interface{}) {
	o.Length = v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *OTP) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTP) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *OTP) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *OTP) SetTemplate(v string) {
	o.Template = &v
}

// GetValidity returns the Validity field value if set, zero value otherwise.
func (o *OTP) GetValidity() float32 {
	if o == nil || IsNil(o.Validity) {
		var ret float32
		return ret
	}
	return *o.Validity
}

// GetValidityOk returns a tuple with the Validity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTP) GetValidityOk() (*float32, bool) {
	if o == nil || IsNil(o.Validity) {
		return nil, false
	}
	return o.Validity, true
}

// HasValidity returns a boolean if a field has been set.
func (o *OTP) HasValidity() bool {
	if o != nil && !IsNil(o.Validity) {
		return true
	}

	return false
}

// SetValidity gets a reference to the given float32 and assigns it to the Validity field.
func (o *OTP) SetValidity(v float32) {
	o.Validity = &v
}

// GetPasscode returns the Passcode field value if set, zero value otherwise.
func (o *OTP) GetPasscode() string {
	if o == nil || IsNil(o.Passcode) {
		var ret string
		return ret
	}
	return *o.Passcode
}

// GetPasscodeOk returns a tuple with the Passcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTP) GetPasscodeOk() (*string, bool) {
	if o == nil || IsNil(o.Passcode) {
		return nil, false
	}
	return o.Passcode, true
}

// HasPasscode returns a boolean if a field has been set.
func (o *OTP) HasPasscode() bool {
	if o != nil && !IsNil(o.Passcode) {
		return true
	}

	return false
}

// SetPasscode gets a reference to the given string and assigns it to the Passcode field.
func (o *OTP) SetPasscode(v string) {
	o.Passcode = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *OTP) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OTP) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *OTP) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *OTP) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o OTP) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OTP) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sender) {
		toSerialize["sender"] = o.Sender
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !IsNil(o.Validity) {
		toSerialize["validity"] = o.Validity
	}
	if !IsNil(o.Passcode) {
		toSerialize["passcode"] = o.Passcode
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableOTP struct {
	value *OTP
	isSet bool
}

func (v NullableOTP) Get() *OTP {
	return v.value
}

func (v *NullableOTP) Set(val *OTP) {
	v.value = val
	v.isSet = true
}

func (v NullableOTP) IsSet() bool {
	return v.isSet
}

func (v *NullableOTP) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOTP(val *OTP) *NullableOTP {
	return &NullableOTP{value: val, isSet: true}
}

func (v NullableOTP) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOTP) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


