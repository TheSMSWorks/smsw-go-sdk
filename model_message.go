/*
The SMS Works API

The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

API version: 1.9.0
Contact: support@thesmsworks.co.uk
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Message type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Message{}

// Message SMS message object
type Message struct {
	// The sender of the message. Should be no longer than 11 characters for alphanumeric or 15 characters for numeric sender ID's. No spaces or special characters.
	Sender string `json:"sender"`
	// Telephone number of the recipient
	Destination string `json:"destination"`
	// Message to send to the recipient. Content can be up to 1280 characters in length. Messages of 160 characters or fewer are charged 1 credit. If your message is longer than 160 characters then it will be broken down in to chunks of 153 characters before being sent to the recipient's handset, and you will be charged 1 credit for each 153 characters. Messages sent to numbers registered outside the UK will be typically charged double credits, but for certain countries may be charged fractions of credits (e.g. 2.5). Please contact us for rates for each country.
	Content string `json:"content"`
	// The url to which we should POST delivery reports to for this message. If none is specified, we'll use the global delivery report URL that you've configured on your account page.
	Deliveryreporturl *string `json:"deliveryreporturl,omitempty"`
	// Date at which to send the message. This is only used by the message/schedule service and can be left empty for other services.
	Schedule *string `json:"schedule,omitempty"`
	// An identifying label for the message, which you can use to filter and report on messages you've sent later. Ideal for campaigns. A maximum of 280 characters.
	Tag *string `json:"tag,omitempty"`
	// The optional number of minutes before the delivery report is deleted. Optional. Omit to prevent delivery report deletion. Integer.
	Ttl *float32 `json:"ttl,omitempty"`
	// An optional list of email addresses to forward responses to this specific message to. An SMS Works Reply Number is required to use this feature.
	Responseemail []string `json:"responseemail,omitempty"`
	Metadata *MessageMetadata `json:"metadata,omitempty"`
	// The optional number of minutes to attempt delivery before the message is marked as EXPIRED. Optional. The default is 2880 minutes. Integer.
	Validity *float32 `json:"validity,omitempty"`
	// Used to determine whether The SMS Works AI Optimiser should be used in the event that the message is just longer than the 1 or 2 credit boundary. This setting overrides the AI Optimiser configuration on your SMS Works account.
	Ai *bool `json:"ai,omitempty"`
}

type _Message Message

// NewMessage instantiates a new Message object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessage(sender string, destination string, content string) *Message {
	this := Message{}
	this.Sender = sender
	this.Destination = destination
	this.Content = content
	return &this
}

// NewMessageWithDefaults instantiates a new Message object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageWithDefaults() *Message {
	this := Message{}
	return &this
}

// GetSender returns the Sender field value
func (o *Message) GetSender() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *Message) GetSenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *Message) SetSender(v string) {
	o.Sender = v
}

// GetDestination returns the Destination field value
func (o *Message) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *Message) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *Message) SetDestination(v string) {
	o.Destination = v
}

// GetContent returns the Content field value
func (o *Message) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *Message) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *Message) SetContent(v string) {
	o.Content = v
}

// GetDeliveryreporturl returns the Deliveryreporturl field value if set, zero value otherwise.
func (o *Message) GetDeliveryreporturl() string {
	if o == nil || IsNil(o.Deliveryreporturl) {
		var ret string
		return ret
	}
	return *o.Deliveryreporturl
}

// GetDeliveryreporturlOk returns a tuple with the Deliveryreporturl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetDeliveryreporturlOk() (*string, bool) {
	if o == nil || IsNil(o.Deliveryreporturl) {
		return nil, false
	}
	return o.Deliveryreporturl, true
}

// HasDeliveryreporturl returns a boolean if a field has been set.
func (o *Message) HasDeliveryreporturl() bool {
	if o != nil && !IsNil(o.Deliveryreporturl) {
		return true
	}

	return false
}

// SetDeliveryreporturl gets a reference to the given string and assigns it to the Deliveryreporturl field.
func (o *Message) SetDeliveryreporturl(v string) {
	o.Deliveryreporturl = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *Message) GetSchedule() string {
	if o == nil || IsNil(o.Schedule) {
		var ret string
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetScheduleOk() (*string, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *Message) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given string and assigns it to the Schedule field.
func (o *Message) SetSchedule(v string) {
	o.Schedule = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *Message) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *Message) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *Message) SetTag(v string) {
	o.Tag = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *Message) GetTtl() float32 {
	if o == nil || IsNil(o.Ttl) {
		var ret float32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetTtlOk() (*float32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *Message) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given float32 and assigns it to the Ttl field.
func (o *Message) SetTtl(v float32) {
	o.Ttl = &v
}

// GetResponseemail returns the Responseemail field value if set, zero value otherwise.
func (o *Message) GetResponseemail() []string {
	if o == nil || IsNil(o.Responseemail) {
		var ret []string
		return ret
	}
	return o.Responseemail
}

// GetResponseemailOk returns a tuple with the Responseemail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetResponseemailOk() ([]string, bool) {
	if o == nil || IsNil(o.Responseemail) {
		return nil, false
	}
	return o.Responseemail, true
}

// HasResponseemail returns a boolean if a field has been set.
func (o *Message) HasResponseemail() bool {
	if o != nil && !IsNil(o.Responseemail) {
		return true
	}

	return false
}

// SetResponseemail gets a reference to the given []string and assigns it to the Responseemail field.
func (o *Message) SetResponseemail(v []string) {
	o.Responseemail = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Message) GetMetadata() MessageMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret MessageMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetMetadataOk() (*MessageMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Message) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given MessageMetadata and assigns it to the Metadata field.
func (o *Message) SetMetadata(v MessageMetadata) {
	o.Metadata = &v
}

// GetValidity returns the Validity field value if set, zero value otherwise.
func (o *Message) GetValidity() float32 {
	if o == nil || IsNil(o.Validity) {
		var ret float32
		return ret
	}
	return *o.Validity
}

// GetValidityOk returns a tuple with the Validity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetValidityOk() (*float32, bool) {
	if o == nil || IsNil(o.Validity) {
		return nil, false
	}
	return o.Validity, true
}

// HasValidity returns a boolean if a field has been set.
func (o *Message) HasValidity() bool {
	if o != nil && !IsNil(o.Validity) {
		return true
	}

	return false
}

// SetValidity gets a reference to the given float32 and assigns it to the Validity field.
func (o *Message) SetValidity(v float32) {
	o.Validity = &v
}

// GetAi returns the Ai field value if set, zero value otherwise.
func (o *Message) GetAi() bool {
	if o == nil || IsNil(o.Ai) {
		var ret bool
		return ret
	}
	return *o.Ai
}

// GetAiOk returns a tuple with the Ai field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Message) GetAiOk() (*bool, bool) {
	if o == nil || IsNil(o.Ai) {
		return nil, false
	}
	return o.Ai, true
}

// HasAi returns a boolean if a field has been set.
func (o *Message) HasAi() bool {
	if o != nil && !IsNil(o.Ai) {
		return true
	}

	return false
}

// SetAi gets a reference to the given bool and assigns it to the Ai field.
func (o *Message) SetAi(v bool) {
	o.Ai = &v
}

func (o Message) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Message) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sender"] = o.Sender
	toSerialize["destination"] = o.Destination
	toSerialize["content"] = o.Content
	if !IsNil(o.Deliveryreporturl) {
		toSerialize["deliveryreporturl"] = o.Deliveryreporturl
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Responseemail) {
		toSerialize["responseemail"] = o.Responseemail
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Validity) {
		toSerialize["validity"] = o.Validity
	}
	if !IsNil(o.Ai) {
		toSerialize["ai"] = o.Ai
	}
	return toSerialize, nil
}

func (o *Message) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sender",
		"destination",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessage := _Message{}

	err = json.Unmarshal(bytes, &varMessage)

	if err != nil {
		return err
	}

	*o = Message(varMessage)

	return err
}

type NullableMessage struct {
	value *Message
	isSet bool
}

func (v NullableMessage) Get() *Message {
	return v.value
}

func (v *NullableMessage) Set(val *Message) {
	v.value = val
	v.isSet = true
}

func (v NullableMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessage(val *Message) *NullableMessage {
	return &NullableMessage{value: val, isSet: true}
}

func (v NullableMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


