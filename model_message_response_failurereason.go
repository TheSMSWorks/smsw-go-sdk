/*
The SMS Works API

The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

API version: 1.9.0
Contact: support@thesmsworks.co.uk
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MessageResponseFailurereason type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageResponseFailurereason{}

// MessageResponseFailurereason struct for MessageResponseFailurereason
type MessageResponseFailurereason struct {
	// Numeric code that defines the error. Integer.
	Code *float32 `json:"code,omitempty"`
	Details *string `json:"details,omitempty"`
	Permanent *bool `json:"permanent,omitempty"`
}

// NewMessageResponseFailurereason instantiates a new MessageResponseFailurereason object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageResponseFailurereason() *MessageResponseFailurereason {
	this := MessageResponseFailurereason{}
	return &this
}

// NewMessageResponseFailurereasonWithDefaults instantiates a new MessageResponseFailurereason object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageResponseFailurereasonWithDefaults() *MessageResponseFailurereason {
	this := MessageResponseFailurereason{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MessageResponseFailurereason) GetCode() float32 {
	if o == nil || IsNil(o.Code) {
		var ret float32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageResponseFailurereason) GetCodeOk() (*float32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MessageResponseFailurereason) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given float32 and assigns it to the Code field.
func (o *MessageResponseFailurereason) SetCode(v float32) {
	o.Code = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *MessageResponseFailurereason) GetDetails() string {
	if o == nil || IsNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageResponseFailurereason) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *MessageResponseFailurereason) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *MessageResponseFailurereason) SetDetails(v string) {
	o.Details = &v
}

// GetPermanent returns the Permanent field value if set, zero value otherwise.
func (o *MessageResponseFailurereason) GetPermanent() bool {
	if o == nil || IsNil(o.Permanent) {
		var ret bool
		return ret
	}
	return *o.Permanent
}

// GetPermanentOk returns a tuple with the Permanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageResponseFailurereason) GetPermanentOk() (*bool, bool) {
	if o == nil || IsNil(o.Permanent) {
		return nil, false
	}
	return o.Permanent, true
}

// HasPermanent returns a boolean if a field has been set.
func (o *MessageResponseFailurereason) HasPermanent() bool {
	if o != nil && !IsNil(o.Permanent) {
		return true
	}

	return false
}

// SetPermanent gets a reference to the given bool and assigns it to the Permanent field.
func (o *MessageResponseFailurereason) SetPermanent(v bool) {
	o.Permanent = &v
}

func (o MessageResponseFailurereason) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageResponseFailurereason) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Permanent) {
		toSerialize["permanent"] = o.Permanent
	}
	return toSerialize, nil
}

type NullableMessageResponseFailurereason struct {
	value *MessageResponseFailurereason
	isSet bool
}

func (v NullableMessageResponseFailurereason) Get() *MessageResponseFailurereason {
	return v.value
}

func (v *NullableMessageResponseFailurereason) Set(val *MessageResponseFailurereason) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageResponseFailurereason) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageResponseFailurereason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageResponseFailurereason(val *MessageResponseFailurereason) *NullableMessageResponseFailurereason {
	return &NullableMessageResponseFailurereason{value: val, isSet: true}
}

func (v NullableMessageResponseFailurereason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageResponseFailurereason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


