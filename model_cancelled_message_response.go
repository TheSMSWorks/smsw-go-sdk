/*
The SMS Works API

The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

API version: 1.9.0
Contact: support@thesmsworks.co.uk
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CancelledMessageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelledMessageResponse{}

// CancelledMessageResponse struct for CancelledMessageResponse
type CancelledMessageResponse struct {
	Messageid string `json:"messageid"`
	Status string `json:"status"`
}

type _CancelledMessageResponse CancelledMessageResponse

// NewCancelledMessageResponse instantiates a new CancelledMessageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelledMessageResponse(messageid string, status string) *CancelledMessageResponse {
	this := CancelledMessageResponse{}
	this.Messageid = messageid
	this.Status = status
	return &this
}

// NewCancelledMessageResponseWithDefaults instantiates a new CancelledMessageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelledMessageResponseWithDefaults() *CancelledMessageResponse {
	this := CancelledMessageResponse{}
	return &this
}

// GetMessageid returns the Messageid field value
func (o *CancelledMessageResponse) GetMessageid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Messageid
}

// GetMessageidOk returns a tuple with the Messageid field value
// and a boolean to check if the value has been set.
func (o *CancelledMessageResponse) GetMessageidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Messageid, true
}

// SetMessageid sets field value
func (o *CancelledMessageResponse) SetMessageid(v string) {
	o.Messageid = v
}

// GetStatus returns the Status field value
func (o *CancelledMessageResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CancelledMessageResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CancelledMessageResponse) SetStatus(v string) {
	o.Status = v
}

func (o CancelledMessageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelledMessageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["messageid"] = o.Messageid
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *CancelledMessageResponse) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"messageid",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCancelledMessageResponse := _CancelledMessageResponse{}

	err = json.Unmarshal(bytes, &varCancelledMessageResponse)

	if err != nil {
		return err
	}

	*o = CancelledMessageResponse(varCancelledMessageResponse)

	return err
}

type NullableCancelledMessageResponse struct {
	value *CancelledMessageResponse
	isSet bool
}

func (v NullableCancelledMessageResponse) Get() *CancelledMessageResponse {
	return v.value
}

func (v *NullableCancelledMessageResponse) Set(val *CancelledMessageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelledMessageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelledMessageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelledMessageResponse(val *CancelledMessageResponse) *NullableCancelledMessageResponse {
	return &NullableCancelledMessageResponse{value: val, isSet: true}
}

func (v NullableCancelledMessageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelledMessageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


